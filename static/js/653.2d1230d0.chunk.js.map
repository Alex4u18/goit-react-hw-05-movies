{"version":3,"file":"static/js/653.2d1230d0.chunk.js","mappings":"sKACA,MAAgC,kCAAhC,EAAiF,iCAAjF,EAAgI,gCAAhI,EAAqL,uCAArL,EAA0O,gCAA1O,EAAuR,+BAAvR,EAAsU,kCAAtU,EAA2X,qC,SCgD3X,MA9CA,SAAmBA,GAA2C,IAAxCC,EAAKD,EAALC,MAAOC,EAAOF,EAAPE,QAASC,EAAmBH,EAAnBG,oBAOpC,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAsBC,QAPb,SAAAC,GACrBA,EAAMC,OAAOC,UAAUC,SAASL,IAClCJ,GAEJ,EAGoEU,UAChEC,EAAAA,EAAAA,MAAA,OAAKR,UAAWC,EAAoBM,SAAA,EAClCR,EAAAA,EAAAA,KAAA,UAAQG,QAASL,EAASG,UAAWC,EAAmBM,SAAC,OAGzDR,EAAAA,EAAAA,KAAA,OACEU,IAAG,mCAAAC,OAAqCd,EAAMe,aAC9CC,IAAKhB,EAAMiB,MACXb,UAAWC,KAEbF,EAAAA,EAAAA,KAAA,UACEG,QAASJ,EACTE,UAAWC,EAA0BM,SACtC,mBAGDR,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAkBM,SAAEX,EAAMiB,SACzCd,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAqBM,SAAEX,EAAMkB,YAC3CN,EAAAA,EAAAA,MAAA,KAAGR,UAAWC,EAAwBM,SAAA,EACpCR,EAAAA,EAAAA,KAAA,UAAAQ,SAAQ,kBAAsB,IAAEX,EAAMmB,oBAKhD,C,2GClCA,EAAkC,gCAAlC,EAA6E,yBAA7E,EAAmH,2BAAnH,EAA0J,0BAA1J,EAAkM,4B,SCsFlM,MAjFA,SAAepB,GAAqB,IAAlBqB,EAAarB,EAAbqB,cAChBC,GAA0CC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAChCI,GAAWC,EAAAA,EAAAA,MAiBjB,OACEhB,EAAAA,EAAAA,MAAA,OAAKR,UAAWC,EAAuBM,SAAA,CACpCS,EAAcS,OAAS,GACtB1B,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAkBM,SAC9BS,EAAcU,KAAI,SAAA9B,GAAK,OACtBY,EAAAA,EAAAA,MAAA,MAEER,UAAWC,EACXC,QAAS,kBAvBI,SAAAN,GACvB0B,EAAiB1B,EACnB,CAqB2B+B,CAAiB/B,EAAM,EAACW,SAAA,EAEvCR,EAAAA,EAAAA,KAAA,OACEU,IACEb,EAAMe,YAAW,mCAAAD,OACsBd,EAAMe,aACzC,oDAENC,IAAKhB,EAAMiB,MACXb,UAAWC,KAEbF,EAAAA,EAAAA,KAAA,MAAAQ,SAAKX,EAAMiB,SACXL,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CACGX,EAAMkB,SACHlB,EAAMkB,SAASW,OAAS,IACtB7B,EAAMkB,SAASc,UAAU,EAAG,KAAO,MACnChC,EAAMkB,SACR,wBAAyB,QAE/BN,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACER,EAAAA,EAAAA,KAAA,UAAAQ,SAAQ,kBAAsB,IAAEX,EAAMmB,cAAgB,WAtBnDnB,EAAMiC,GAwBR,OAIT9B,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAgBM,SAAC,iDAKhCc,IACCtB,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CACTlC,MAAOyB,EACPxB,QA9CW,WACjByB,EAAiB,KACnB,EA6CQxB,oBAtDwB,WAC1BuB,GAAiBA,EAAcQ,KACjCN,EAAS,WAADb,OAAYW,EAAcQ,IAAM,CAAEE,MAAO,CAAEC,KAAM,YACzDV,EAAiB,MAErB,MAsDF,C","sources":["webpack://react-homework-template/./src/components/MenuModal/MovieModal.module.css?7cf1","components/MenuModal/MovieModal.jsx","webpack://react-homework-template/./src/components/Movies/Movies.module.css?9f30","components/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalBackdrop\":\"MovieModal_modalBackdrop__-c5Px\",\"modalContent\":\"MovieModal_modalContent__i4gJD\",\"closeButton\":\"MovieModal_closeButton__ONvrY\",\"movieDetailsButton\":\"MovieModal_movieDetailsButton__4Twx7\",\"moviePoster\":\"MovieModal_moviePoster__XQliH\",\"movieTitle\":\"MovieModal_movieTitle__5fgRP\",\"movieOverview\":\"MovieModal_movieOverview__COdXV\",\"movieReleaseDate\":\"MovieModal_movieReleaseDate__F8-ue\"};","import PropTypes from 'prop-types';\nimport styles from './MovieModal.module.css';\n\nfunction MovieModal({ movie, onClose, onMovieDetailsClick }) {\n  const handleClickOutside = event => {\n    if (event.target.classList.contains(styles.modalBackdrop)) {\n      onClose();\n    }\n  };\n\n  return (\n    <div className={styles.modalBackdrop} onClick={handleClickOutside}>\n      <div className={styles.modalContent}>\n        <button onClick={onClose} className={styles.closeButton}>\n          X\n        </button>\n        <img\n          src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n          alt={movie.title}\n          className={styles.moviePoster}\n        />\n        <button\n          onClick={onMovieDetailsClick}\n          className={styles.movieDetailsButton}\n        >\n          Movie Details\n        </button>\n        <h2 className={styles.movieTitle}>{movie.title}</h2>\n        <p className={styles.movieOverview}>{movie.overview}</p>\n        <p className={styles.movieReleaseDate}>\n          <strong>Release Date:</strong> {movie.release_date}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nMovieModal.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    overview: PropTypes.string,\n    release_date: PropTypes.string,\n  }).isRequired,\n  onClose: PropTypes.func.isRequired,\n  onMovieDetailsClick: PropTypes.func.isRequired,\n};\n\nexport default MovieModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesContainer\":\"Movies_moviesContainer__D1+tn\",\"noResult\":\"Movies_noResult__vv8y2\",\"moviesList\":\"Movies_moviesList__Un-WS\",\"movieCard\":\"Movies_movieCard__FuwX5\",\"moviePoster\":\"Movies_moviePoster__8wnP9\"};","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport MovieModal from '../MenuModal/MovieModal';\nimport styles from './Movies.module.css';\n\nfunction Movies({ searchResults }) {\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const navigate = useNavigate();\n\n  const handleMovieClick = movie => {\n    setSelectedMovie(movie);\n  };\n\n  const handleMovieDetailsClick = () => {\n    if (selectedMovie && selectedMovie.id) {\n      navigate(`/movies/${selectedMovie.id}`, { state: { from: 'movies' } });\n      setSelectedMovie(null);\n    }\n  };\n\n  const closeModal = () => {\n    setSelectedMovie(null);\n  };\n\n  return (\n    <div className={styles.moviesContainer}>\n      {searchResults.length > 0 ? (\n        <ul className={styles.moviesList}>\n          {searchResults.map(movie => (\n            <li\n              key={movie.id}\n              className={styles.movieCard}\n              onClick={() => handleMovieClick(movie)}\n            >\n              <img\n                src={\n                  movie.poster_path\n                    ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\n                    : 'https://via.placeholder.com/500x750?text=No+Image'\n                }\n                alt={movie.title}\n                className={styles.moviePoster}\n              />\n              <h3>{movie.title}</h3>\n              <p>\n                {movie.overview\n                  ? movie.overview.length > 100\n                    ? movie.overview.substring(0, 100) + '...'\n                    : movie.overview\n                  : 'No overview available'}{' '}\n              </p>\n              <p>\n                <strong>Release Date:</strong> {movie.release_date || 'N/A'}\n              </p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className={styles.noResult}>\n          No results found. Try searching for a movie!\n        </p>\n      )}\n\n      {selectedMovie && (\n        <MovieModal\n          movie={selectedMovie}\n          onClose={closeModal}\n          onMovieDetailsClick={handleMovieDetailsClick}\n        />\n      )}\n    </div>\n  );\n}\n\nMovies.propTypes = {\n  searchResults: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      overview: PropTypes.string,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default Movies;\n"],"names":["_ref","movie","onClose","onMovieDetailsClick","_jsx","className","styles","onClick","event","target","classList","contains","children","_jsxs","src","concat","poster_path","alt","title","overview","release_date","searchResults","_useState","useState","_useState2","_slicedToArray","selectedMovie","setSelectedMovie","navigate","useNavigate","length","map","handleMovieClick","substring","id","MovieModal","state","from"],"sourceRoot":""}